[{"url":"/2019/04/05/如何修改CheckBoxPreference 中title ，summary字体的颜色/","content":"以前没怎么关注过PreferenceActivity的一些用法只是简单了解下，然后刚好今天遇到了某个机型上出现了问题：**我明明设置的是黑色的字体，在这个机器上却是白色的**，然后各种摸索得出了个推论，页面的字体颜色什么的，可能是更随系统来的，受系统调控：\n我是这么写的，\n\n                <CheckBoxPreference    \n                android:defaultValue=\"true\"   \n               android:key=\"weather_use_metric\"  \n              android:textColor=\"@color/black\"\n                android:title=\"@string/weather_use_metric\" />\n\n问题出现 了那没办法，只能想办法改了，好在现在学会了面向google编程，然后搜的一下，找到了个解决方案，先上怎么解决，然后再说为什么这么干。首先建个layout ，名字随便取（我取名custom_preferece_layout.xml），内容如下:\n\n              <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" \n                 android:layout_width=\"match_parent\"\n               android:layout_height=\"wrap_content\"   \n               android:minHeight=\"?android:attr/listPreferredItemHeight\" \n               android:gravity=\"center_vertical\" \n               android:paddingRight=\"?android:attr/scrollbarSize\">  \n            <RelativeLayout android:layout_width=\"wrap_content\"        \n              android:layout_height=\"wrap_content\" android:layout_marginLeft=\"15dip\"   \n             android:layout_marginRight=\"6dip\"\n             android:layout_marginTop=\"6dip\"      \n             android:layout_marginBottom=\"6dip\" \n             android:layout_weight=\"1\">     \n            <TextView android:id=\"@+android:id/title\"       \n               android:layout_width=\"wrap_content\" \n             android:layout_height=\"wrap_content\"         \n             android:singleLine=\"true\" \n              android:textAppearance=\"?android:attr/textAppearanceLarge\"        \n              android:ellipsize=\"marquee\" android:fadingEdge=\"horizontal\"         \n             android:textColor=\"@color/black\" />    \n            <TextView android:id=\"@+android:id/summary\"     \n             android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\"          \n            android:layout_below=\"@android:id/title\" \n            android:layout_alignLeft=\"@android:id/title\"           \n           android:textAppearance=\"?android:attr/textAppearanceSmall\"        \n           android:maxLines=\"4\" />   \n       </RelativeLayout>    \n    <!-- Preference should place its actual preference widget here. -->  \n        <LinearLayout android:id=\"@+android:id/widget_frame\"     \n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"match_parent\"        \n          android:gravity=\"center_vertical\" android:orientation=\"vertical\" />\n      </LinearLayout>\n\n在这个布局中修改title，sunmmary的颜色就可以了。\n然后再CheckBoxPreference    中加一句：\n\n\n          <CheckBoxPreference   \n           android:defaultValue=\"true\"   \n             android:key=\"weather_use_metric\"  \n            android:layout=\"@layout/custom_preferece_layout\" \n            android:textColor=\"@color/black\"   \n               />\n然后，就解决了这个问题，那为什么这么搞呢？进入CheckBoxPreference   顶层父类Preference中看，看到构造中的注释了：\n\n\n![QQ截图20161110175559.png](http://upload-images.jianshu.io/upload_images/1453857-fca483c577435efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n这玩意默认的控制了样式，然后再往下看到一个方法：\n\n\n![QQ截图20161110175911.png](http://upload-images.jianshu.io/upload_images/1453857-54f7fd8444a953dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n他说大部分情况足够用了，但是这不是出来问题么，于是到android的values中的attr下找，\n\n\n![Paste_Image.png](http://upload-images.jianshu.io/upload_images/1453857-e5a69f67b3b10c3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n嗯很贴心，行数都截出来了。顶层默认实现了个布局，在CheckBoxPreference的onBindView方法中出现了个id和一个方法：\n![QQ截图20161110181103.png](http://upload-images.jianshu.io/upload_images/1453857-30381fbc2e2d3ff8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nid点进去能找到个布局，然后再父类TwoStatePreference中可以看到这个方法里面写了什么，注意看上面的布局控件的id，你没看错，就是覆盖了preference_material.xml 中的布局：\n\n\n![QQ截图20161110181315.png](http://upload-images.jianshu.io/upload_images/1453857-c2fb7896c6189aba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n附上答案链接 [http://stackoverflow.com/questions/4469514/how-to-customize-text-color-of-the-checkboxpreference-title](http://stackoverflow.com/questions/4469514/how-to-customize-text-color-of-the-checkboxpreference-title)"},{"url":"/2019/04/05/Android通过反射实现静默安装/","content":"本文讲解通过反射Android pm  instal来调用隐藏api， 来静默安装，至于原理什么的，就不多说了，网络上一搜一大把，下面是亲测可行的；\n先上[Demo](https://github.com/messnoTrace/SlienceInstall),其中的libs文件夹下的class.jar是主角。\n本文有一个大前提，那就是你的apk是放在系统/system/priv-app目录下，也就是说，rom是你们自己搞的，手动滑稽=。= \n如果你是用AndroidStudio版本的，也是链接中的[DemoSilenceInstall](https://github.com/messnoTrace/SlienceInstall/tree/master/DemoSilenceInstall)\n步骤如下：\n * 建一个你自己的工程 ，将class.jar放入到libs目录下。\n * 然后projectStructure(按F4直接进)，进入dependence点击+号，选择FileDependence 记得把 scope置为Provided，如下图:\n![1.png](http://upload-images.jianshu.io/upload_images/1453857-d74f2be33a1b022c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n* 工程目录下的gradle文件修改：\n              allprojects {  \n                repositories {      \n                          jcenter()   \n                       }  \n                          gradle.projectsEvaluated {             \n                                   tasks.withType(JavaCompile) {     \n                                                 options.compilerArgs.add('-Xbootclasspath/p:app\\\\libs\\\\class.jar')                  \n                                }  \n                               }\n                          }\n\n     **看好名字,不要眼瞎，后面是你起的jar包的名字，这个名字随意取，两者对应就行，**\n\n    以上的操作的目的有两个：\n      1.就是将class.jar以eclipse中那种userlib的形式导入，\n      2.调整jar包的优先级\n* 再将demo中install 包下的代码放到你的工程中.如果这个时候你的PM.java这个文件不报错，那么恭喜，你的操作就算完成了\n* 这个步骤我的代码出现了问题，不知道你的会不会，就是Android中65535问题了，也就是解决这个问题做的操作，AS下好解决，这个不做过多解释。\n\n\n剩下的，就是将应用打包签名，放到/system/priv-app这个目录下 就ok了，\n\n下面说下Eclipse版本的操作，代码都是一样的，jar包也是一样，就两点，jar包通过userlibrary的形式导入，直接放图吧，多图慎入：\n![\n![Uploading 4_049957.png . . .]\n](http://upload-images.jianshu.io/upload_images/1453857-e9e8d436fbd4ddde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![3.png](http://upload-images.jianshu.io/upload_images/1453857-d5b134f0db69b9a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![4.png](http://upload-images.jianshu.io/upload_images/1453857-cecd54290fd90360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![\n\n![Uploading 6_086779.png . . .]\n](http://upload-images.jianshu.io/upload_images/1453857-e6cde6675deb959b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![6.png](http://upload-images.jianshu.io/upload_images/1453857-16490fdfd7ab0de6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n![7.png](http://upload-images.jianshu.io/upload_images/1453857-73ac54c47095b33b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![8.png](http://upload-images.jianshu.io/upload_images/1453857-c524e6d1cb374503.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![9.png](http://upload-images.jianshu.io/upload_images/1453857-c57017127dc439c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n![\n![Uploading 10_162291.png . . .]\n](http://upload-images.jianshu.io/upload_images/1453857-d0b9e66477c90d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![11.png](http://upload-images.jianshu.io/upload_images/1453857-8fd7af66b59e3784.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n至此，，搞定了，╮(╯▽╰)╭，继续搬砖。如果你要问这个class怎么来的，你找做rom的大神们给你编译一份源码就行，反正我不会。OTZ.... 然而这个地方在我写完文章后又出现了一个实战问题，那就是用multydex分包处理后，还是会出现 [Too many classes in --main-dex-list, main dex capacity exceeded](http://stackoverflow.com/questions/32721083/too-many-classes-in-main-dex-list-main-dex-capacity-exceeded)，，目前一个最简单暴力的方法就是把minsdkversion 调成21+，我在想想办法，，，，解决了更新文章。\n\n\n(⊙o⊙)…，暂时没解决，不过上了一个新版本，用aidl实现的，也是可以用[这里的](https://github.com/messnoTrace/SlienceInstall/tree/master/MyApplication)...东西都差不多，jar包换了个精简的，然后改用aidl实现的注意，aidl的包名不要动，，，然后配置下gradle里面的aidl"},{"url":"/2019/04/05/Android 多渠道打包如何修改app name，icon/","content":"搞过多渠道打包的都知道，我们只需要在 module 的build.gradle中配置相应的渠道号就行：\n                        \n                    productFlavor{\n                              baidu {\n                              }\n                            xiaomi{}\n                             wandoujia{}\n                        }\n像这样，就可以了，然后将友盟的chanelvalue修改下就可以了，需要不同的渠道，配置不同的applicationid，也不是什么难事。不过今天我遇到的需求是，不同的渠道配置不同的appname和icon。一开始我想着用之前的哪种方法应该可行，然后就试了下，一试不知道，试过就蛋疼了，appname是可以换掉，但是icon呢，，咋整，，，找了一圈方法，都木有找到，郁闷，string类型的，都可以通过常用的那种替换占位符的方式来改，或者是resValue(这个没有试，，但是似乎是可以的)。然后各种搜资料，有什么设置 useOldManifestMerger false ，不过自己没试成功（不能怪我，理论是这个道理的，只不过gradle版本不一样，Google升级了，导致我懵逼了）偶然间Google了一下  how to change app icon for diffrent productFlavors in android，点开第一个[链接](http://stackoverflow.com/questions/22875948/how-to-provide-different-android-app-icons-for-different-gradle-buildtypes),然后答主的答案给了我一些启发：\n\n\n![QQ截图20160811184619.png](http://upload-images.jianshu.io/upload_images/1453857-3cbf6c005c8c592c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n然后搜啊搜，又找到了[这个](http://stackoverflow.com/questions/25981156/tools-replace-not-replacing-in-android-manifest)\n\n\n\n\n![QQ截图20160811185123.png](http://upload-images.jianshu.io/upload_images/1453857-0c8656280ca0a302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n然后经过自己的摸索，搞了出来了，简单来说：\n大家看第一张图你的目录结构就会发现，如果我们在src/main/文件夹下新建以我们去渠道名为名的，目录结构和main一样的文件目录，当我们打包的时候就会读取这里面的资源文件，所以呢，我就新建了个清单文件，将头部换成图二所示，在根目录添加\n\n                  xmlns:tools=\"http://schemas.android.com/tools\"\n\n然后application\n  \n          tools:replace=\"android:icon\" \n          android:icon=\"@drawable/icon_all\"\n\n替换你需要换的icon就行，ok，至此搞定，至于为什么这么搞，我看到了官方的一篇文章[清单合并](http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger#TOC-Manifest-files-ordering),另外还有篇国内[译文](http://blog.csdn.net/maosidiaoxian/article/details/42671999)\n\n\n剩下的就靠小伙伴么自己摸索了。。。。"},{"url":"/2019/04/05/AndroidStudio中调用.so包出现找不到.so包的错误/","content":"![QQ截图20160721125018.png](http://upload-images.jianshu.io/upload_images/1453857-0fb31dfbb366a918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###出现原因\nRT,在Andoridsutdio中调用.so库出现如现标题所示错误，该怎么解决。首先出现这个错误的原因是因为你的cpu架构是64位的。而你的.so库在编译的时候没有支持64位cpu。**  如果这个.so的库是你自己弄的，那你重新生成下支持64位cpu的.so库出来就行了，剩下的文字就不用看了，本文适用于你没法对.so做操作的朋友。** 查看cpu架构，可以通过adb shell 命令。进入/system/目录下有一个build.prop文件，这个里面有一行 ro.product.cpu.abi=xx就是你所要的信息，具体命令如下:\n\n                    adb shell\n                    cd /system\n                    cat build.prop\n\n\napk包在安装的时候，系统会把包中与自己的abi对应的lib目录中的so库文件拷贝到system分区中，32位机器中只有一个目录/system/lib，64位机器中有两个目录/system/lib和/system/lib64，app启动进行链接时，64位机器中会先到/system/lib64目录中去找，这时候肯定找不到。如果没有找到再到/system/lib目录中去找。如果你把32位的so库拷贝到了lib64目录中，会导致链接失败，同样，64位的so库被拷贝到lib目录中也会导致失败，所以so库要和目录一一对应。\n\n###解决方案\n首先我的目录结构是这样的：\n![QQ截图20160721123538.png](http://upload-images.jianshu.io/upload_images/1453857-be5473a00f8f04a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我的.so并没有放在新建的jniLibs目录中，这个关系应该不大，两种方式都可以。\n我的cpu架构是 ro.product.cpu.abi=arm64-v8a\n而我的只有一个CPU架构就是armebi-v7a,我们要做的就是阻止生成arm64-v8a;\n正常情况打开apk的lib结构如下：\n![QQ截图20160721124748.png](http://upload-images.jianshu.io/upload_images/1453857-5e5183dd73f1ac09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n方案如下：\n* 首先在project目录下的 gradle.properties中添加一句 \n              android.useDeprecatedNdk=true\n* 在app的build.gradle中的defaulConfig下添加如下：\n            ndk {  \n              abiFilters \"armeabi\", \"armeabi-v7a\", \"x86\", \"mips\"\n            }\n\n\n这时候你解压开生成的apk包，会发现目录lib结构如下：\n\n![QQ截图20160721124539.png](http://upload-images.jianshu.io/upload_images/1453857-df30fc0704288587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOK，这样就解决了我的这个问题，网络上有一些别的阻止生成arm64-v8a，但是不好使。"},{"url":"/2019/04/05/Android Accessibility 的简单用法/","content":"Accessbility 又叫做辅助功能，是Android官方推出帮助身体不便或者操作不灵活的人来辅助操作的，也可以用来干一些别的事，比如自动抢红包啊，静默安装点击啊等已知或者未知的应用。出于某种需求，就研究了下这个功能的简单用法，先做一个模拟按钮点击的效果。\n  布局很简单，就不贴代码了，简单描述下，主界面就一个按钮，id随便你取，在Activity中设置点击事件，弹出一个Toast。\n\n#####步骤\n1. 创建CheckAccessbilityServices：\n CheckAccessbilityServices 继承自AccessibilityService，并在清单文件applcation节点中配置，并加入权限\n          <service   \n           android:name=\".CheckAccessbilityServices\"   \n           android:enabled=\"true\"        \n          android:exported=\"true\"\n          android:label=\"测试点击\"\n          android:permission=\"android.permission.BIND_ACCESSIBILITY_SERVICE\">  \n              <intent-filter>      \n                <action android:name=\"android.accessibilityservice.AccessibilityService\" />\n                </intent-filter> \n             <meta-data\n                   android:name=\"android.accessibilityservice\"\n                   android:resource=\"@xml/check_accessibility_config\" />\n          </service>\n2.在res目录下创建文件夹xml，并创建步骤一中check_accessibility_config.xml\n            <accessibility-service xmlns:android=\"http://schemas.android.com/apk/res/android\"                   android:description=\"@string/check_click\" \n                android:packageNames=\"com.notrace\"      \n            android:accessibilityEventTypes=    \"typeAllMask|typeViewClicked|typeViewFocused|typeNotificationStateChanged|typeWindowStateChanged\"    \n              android:accessibilityFlags=\"flagDefault\"   \n              android:accessibilityFeedbackType=\"feedbackSpoken\"    \n              android:notificationTimeout=\"100\"   \n              android:canRetrieveWindowContent=\"true\"    />\n这里面有一些常用的属性，简单介绍下\n          android:accessibilityEventTypes=\"typeAllMask\"\n看属性名也差不多可以明白，这个是用来设置响应事件的类型，typeAllMask当然就是响应所有类型的事件了。当然还有单击、长按、滑动等。 \n          android:accessibilityFeedbackType=\"feedbackSpoken\"\n设置回馈给用户的方式\n\n          android:notificationTimeout=\"100\"\n 响应时间的设置就不用多说了 \n          android:packageNames=\"com.notrace\"\n可以指定响应某个应用的事件，我的demo包名就叫com.notrace,可以多个，用\",\"隔开。\n          android:description=\"模拟点击\"\n\n描述你在系统辅助功能开关中看到的描述\n\n3.CheckAccessbilityServices  实现onAccessibilityEvent和onInterrupt方法\n\n                    @Override  \n                public void onAccessibilityEvent(AccessibilityEvent event) {  \n                          //过滤包名\n                          String pkgName = event.getPackageName().toString();    \n                          if(!\"com.notrace\".equals(pkgName))\n                                return;\n                        switch (type){  \n                              case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED:      \n                          //切换页面的时候此时会触发一个叫TYPE_WINDOW_STATE_CHANGED的事件\n                            AccessibilityNodeInfo nodeInfo = getRootInActiveWindow(); \n                           if(nodeInfo!=null)  {\n                               if(\"com.notrace.MainActivity\".equals(event.getClassName())){    \n                                    List<AccessibilityNodeInfo>     list=\n                                    nodeInfo.findAccessibilityNodeInfosByViewId(\"com.notrace:id/btn_click\");\n                              if(list!=null&&list.size()>0)  {        \n                              list.get(0).performAction(AccessibilityNodeInfo.ACTION_CLICK);       \n                               }        \n                          }       \n                           break;   \n                       case AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED:   \n                         break;\n                      }                     \n               }  \n\n注意这里有个叫com.notrace:id/btn_click的，就是前面的那个按钮，我取id叫btn_click,这个东西可以通过eclipse提供的一个工具dump查看,如下图：\n\n![QQ截图20160808162014.png](http://upload-images.jianshu.io/upload_images/1453857-78fa62630f5370b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n微信抢红包的界面你就可以这么看了。\nlist.get(0).performAction(AccessibilityNodeInfo.ACTION_CLICK);      就是模拟点击事件\n\n\n\n\n至此，模拟点击就已经全部完成了，我们打开手机辅助功能界面会看见：\n![QQ截图20160808162331.png](http://upload-images.jianshu.io/upload_images/1453857-2b1084259b04dab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击进去：\n![QQ截图20160808162434.png](http://upload-images.jianshu.io/upload_images/1453857-cd8e0447e512c2ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n打开这个开关就可以了。\n至此，当页面切换到MainActivity中就可以弹出toast了，至于别的奇奇怪怪的功能，就需要小伙伴们自己摸索了。\n[Demo代码](https://github.com/messnoTrace/Demo_Accessbility.git)"}]